---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '../components/FormattedDate.astro'
import BaseLayout from './BaseLayout.astro'
import Tag from '../components/Tag.astro'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'

type Props = {
	data: CollectionEntry<'blog'>['data'],
	headings: MarkdownHeading[],
	readTime: string
}

const { data, readTime } = Astro.props
const { title, description, pubDate, updatedDate, heroImage, tags } = data


---

<BaseLayout title={title} description={description} image={heroImage}  >
	<article class='md:py-4 max-w-xs md:max-w-none '>
		<header class="mb-3 flex flex-col justify-center items-center gap-6">
			<div class="flex flex-col gap-2">
        <div class="flex items-center justify-center gap-x-1">
				<p class="text-center text-sm text-opacity-50">
					Published <FormattedDate date={pubDate} />
				</p>
        <p class="text-center text-sm text-opacity-50 font-bold">- {readTime}</p>
        </div>
				<h1 class="text-center text-2xl md:text-5xl font-semibold">
					{title}
				</h1>
			</div>

			<div class="flex flex-wrap gap-2 md:gap-5">
				{tags.map(tag => <Tag>{tag}</Tag>)}
			</div>
		</header>

		{
			heroImage && (
				<Image
					src={heroImage}
      width={1000}
      height={500}
			quality={100}
      format="webp"
      class="rounded-md w-full max-h-[500px] my-8"
      alt={`img of ${title}`}
				/>
			)
		}

		{
			updatedDate && (
				<div class="last-updated-on">
					Last updated on <FormattedDate date={updatedDate} />
				</div>
			)
		}

		<hr />

		<div class="mt-8 md:px-8">
			<div class="grid grid-cols-4 relative max-w-6xl prose lg:prose-xl dark:prose-invert">
        <slot />
      </div>
			
		</div>
	</article>
</BaseLayout>
